from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Debtor, SessionLocal
from datetime import datetime
from keyboard import get_debtors_keyboard, get_actions_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞
class AddDebt(StatesGroup):
    name = State()
    phone = State()
    amount = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ–ª–≥–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
@router.message(Command("add"))
async def add_debt(message: Message, state: FSMContext):
    await state.set_state(AddDebt.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è AddDebt.name
@router.message(AddDebt.name)
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddDebt.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–Ω–∏–∫–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è AddDebt.phone
@router.message(AddDebt.phone)
async def enter_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(AddDebt.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è AddDebt.amount
@router.message(AddDebt.amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return

    data = await state.get_data()
    name = data["name"]
    phone = data["phone"]

    db = SessionLocal()
    new_debtor = Debtor(name=name, phone=phone, amount=amount, date=datetime.utcnow())
    db.add(new_debtor)
    db.commit()
    db.close()

    await state.clear()
    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüí∞ –°—É–º–º–∞: {amount}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@router.message(Command("list"))
async def list_debts(message: Message):
    db = SessionLocal()
    debtors = db.query(Debtor).order_by(Debtor.date.desc()).all()
    db.close()

    if not debtors:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–æ–ª–∂–Ω–∏–∫–∞—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ª–∂–Ω–∏–∫–∞–º–∏
    keyboard = get_debtors_keyboard(debtors)
    await message.answer("üìú –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("select_"))
async def select_debtor(callback: CallbackQuery):
    debtor_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞
    keyboard = get_actions_keyboard(debtor_id)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ–ª–≥–∞
@router.callback_query(F.data.startswith("increase_"))
async def increase_debt(callback: CallbackQuery, state: FSMContext):
    debtor_id = int(callback.data.split("_")[1])
    await state.update_data(debtor_id=debtor_id)
    await state.set_state("enter_increase_amount")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ª–≥:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
@router.callback_query(F.data.startswith("decrease_"))
async def decrease_debt(callback: CallbackQuery, state: FSMContext):
    debtor_id = int(callback.data.split("_")[1])
    await state.update_data(debtor_id=debtor_id)
    await state.set_state("enter_decrease_amount")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@router.callback_query(F.data.startswith("delete_"))
async def delete_debt(callback: CallbackQuery):
    debtor_id = int(callback.data.split("_")[1])

    db = SessionLocal()
    debtor = db.query(Debtor).filter(Debtor.id == debtor_id).first()
    if debtor:
        db.delete(debtor)
        db.commit()
        await callback.message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –æ {debtor.name} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    db.close()

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ–ª–≥–∞
@router.message(state="enter_increase_amount")
async def enter_increase_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return

    data = await state.get_data()
    debtor_id = data["debtor_id"]

    db = SessionLocal()
    debtor = db.query(Debtor).filter(Debtor.id == debtor_id).first()
    if debtor:
        debtor.amount += amount
        db.commit()
        await message.answer(f"‚úÖ –î–æ–ª–≥ {debtor.name} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount} —Ä—É–±. –ù–æ–≤—ã–π –¥–æ–ª–≥: {debtor.amount} —Ä—É–±.")
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    db.close()

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
@router.message(state="enter_decrease_amount")
async def enter_decrease_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return

    data = await state.get_data()
    debtor_id = data["debtor_id"]

    db = SessionLocal()
    debtor = db.query(Debtor).filter(Debtor.id == debtor_id).first()
    if debtor:
        debtor.amount -= amount
        db.commit()
        await message.answer(f"‚úÖ –î–æ–ª–≥ {debtor.name} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount} —Ä—É–±. –ù–æ–≤—ã–π –¥–æ–ª–≥: {debtor.amount} —Ä—É–±.")
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    db.close()

    await state.clear()